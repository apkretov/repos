//Functional Programming in C++11 @ https://www.grimm-jaud.de/images/stories/pdfs/FunctionalProgrammingInC++11.pdf
Programming in a functional style:
▪ Automatic type deduction with auto and decltype
▪ Support for lambda-functions
	closures
	functions as data
▪ Partial function application
	std::function and std::bind
	lambda-functions and auto
▪ List manipulation with variadic templates
▪ Pattern matching with full and partial template specialisation

Characteristics of functional programming:
▪ first-class functions
▪ higher-order functions
▪ pure functions
▪ recursion
▪ list processing
▪ lazy evaluation


//Functional Programming in C++ @ https://www.manning.com/books/functional-programming-in-cplusplus
Function objects (std::function)
Creating new functions from the old ones (std::bind)
Purity - avoiding mutable state (const)
Lazy evaluation
Ranges
Monads (std::transform)

//Study Notes: Functional Programming with C++ @ https://yongweiwu.wordpress.com/2014/12/07/study-notes-functional-programming-with-cplusplus/
Map
Reduce
Pipeline
Ranges

//FUNCTIONAL PROGRAMMING IN C++14 @ file:///home/alex/Downloads/1284-Article%20Text-3352-1-10-20180119.pdf
The auto keyword
First-class functions
Lambda and Anonymous functions
Closure
Partial Application
Higher-order functions (HOFs)
map, filter and fold
Currying
Monads
Recursion

//Functional programming @ https://en.wikipedia.org/wiki/Functional_programming
2 Concepts
2.1	First-class and higher-order functions
2.2	Pure functions
2.3	Recursion
2.4	Strict versus non-strict evaluation
2.5	Type systems
2.6	Referential transparency
2.7	Functional programming in non-functional languages
2.8	Data structures